using AutoMapper;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Web.Http;
using Vidly2.Dtos;
using Vidly2.Models;

namespace Vidly2.Controllers.Api
{
    public class CustomersController : ApiController
    {
        private ApplicationDbContext _context;

        public CustomersController()
        {
            _context = new ApplicationDbContext();
        }

        /*      Returning or recieving "Customer" object as a parameter
         * is considered a poor practice because future changes
         * can break clients that are dependant on Customer object.
         * If we rename or remove the property it will impact
         * the client that is depentant on that property.
         *      To solve this issue you should create a DTO
         * (Data Transfer Object) model which will be used to transfer
         * data to client and back to server. But changing the DTO 
         * is also a process to be aware of. To learn more, search
         * for API Versioning.
         
             */
                    
        /*      AutoMapper
         * To avoid the need to manually remap from one object to another
         * (from Customer to CustomerDto or vice-verse)
         * it is more convenient to use AutoMapper tool.Each action here
         * represents somewhat unique way of using it.
         * Before using it here I had to download this tool, create
         * a MappingProfile in App_Start folder and initialize Mapper in Global.asax.cs.
             */

        // GET /api/customers
        public IEnumerable<CustomerDto> GetCustomers()
        {
            //Mapping Customer objects from database to CustomerDto objects
            //Mapper.Map is a reference to the method(delegate) not the call, so no () at the end.
            return _context.Customers.ToList().Select(Mapper.Map<Customer, CustomerDto>);
        }

        //GET /api/customers/1
        public IHttpActionResult GetCustomer(int id)
        {
            var customer = _context.Customers.SingleOrDefault(c => c.Id == id);
            if (customer == null)
                return NotFound();

            //Cant use .Select here because we are returning only one Customer object.
            //So we will just return mapped CustomerDto object.
            return Ok(Mapper.Map<Customer, CustomerDto>(customer));
        }

        //POST /api/customers
        /*According to RESTful convention, we need to return 201 CREATED, not 200 OK when creating an object.
        *To do this, return IHttpActionResult instead of CustomerDto as it provides
        *more control over the return value from action. It is simmilar to 
        * MVC's ActionResult class and is implemented by a number of classes like:
        *   • NotFound()
            • Ok()
            • Created()
            • Unauthorized()
            • BadRequest()
             *  */
        [HttpPost]
        public IHttpActionResult CreateCustomer(CustomerDto customerDto)
        {
            if (!ModelState.IsValid)
            {
                //throw new HttpResponseException(HttpStatusCode.BadRequest);
                //with IHttpActionResult return this
                return BadRequest();
            }

            var customer = Mapper.Map<CustomerDto, Customer>(customerDto);

            _context.Customers.Add(customer);
            _context.SaveChanges();

            //This customer object has an ID that is generated by the DB
            //so we want to add this ID in our DTO and return it to the client.
            customerDto.Id = customer.Id;

            //Here, as a part of RESTful convention, we need to return the URI 
            //of the newly created resource to the client,like "api/customer/10"
            return Created(new Uri(Request.RequestUri + "/" + customer.Id), customerDto);
        }

        // PUT /api/customers/1
        [HttpPut]
        public IHttpActionResult UpdateCustomer(int id, CustomerDto customerDto)
        {
            if (!ModelState.IsValid)
            {
                 return BadRequest();
            }
            var customerInDb = _context.Customers.SingleOrDefault(c => c.Id == id);

            if (customerInDb == null)
                return NotFound();

            //Map method takes also two parameters and it can understand 
            //from which type to which it should map
            Mapper.Map(customerDto, customerInDb);
            
            _context.SaveChanges();

            return Ok();

        }
        // DELETE /api/customers/1
        [HttpDelete]
        public IHttpActionResult DeleteCustomer(int id)
        {
            var customerInDb = _context.Customers.SingleOrDefault(c => c.Id == id);

            if (customerInDb == null)
                return NotFound();

            _context.Customers.Remove(customerInDb);
            _context.SaveChanges();

            return Ok();
        }
    }
}
