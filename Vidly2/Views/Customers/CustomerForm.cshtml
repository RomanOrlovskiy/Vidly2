@model Vidly2.ViewModels.CustomerFormViewModel
@{
    ViewBag.Title = "New";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<h2>New Customer</h2>
@* BeginFrom is the same as I did in CS50:
    <form action="sell.php" method="post">. But it only renders
    <form> withouth closing tag </form>.
    To ensure that we close this <form> tag with </form> tag
    you could use "using" statement so that at the end of it's block
    the object returned from Html.BeginForm will be disposed. And in
    that dispose method it will (somehow) render </form> tag
*@
@using (Html.BeginForm("Save", "Customers"))
{
    <div class="form-group">
        @Html.LabelFor(c => c.Customer.Name) @*same as <label>...</label>*@

        @*Last anonymous object specifies any additional attributes you want your field to have
            So this is the same as <input class="form-control">..."lots of stuff done by c#"..</input>

              TextBoxFor extension method automatically provides validation that we
              have indicated with attributes in the model classes.
              If you use simple html code, than you would have to do it all
              manually. Inspect input element in the browser to see what is done
              automatically.

        *@
        @Html.TextBoxFor(c => c.Customer.Name, new { @class = "form-control" })
        @*prefix class with @ because class is a reserved word*@
        @Html.ValidationMessageFor(m => m.Customer.Name)
    </div>
    <div class="form-group">
        @Html.LabelFor(c => c.Customer.Birthdate)
        @Html.TextBoxFor(c => c.Customer.Birthdate, "{0:d MMM yyyy}",  new { @class = "form-control" })
    </div>
    <div class="form-group">
        @Html.LabelFor(c => c.Customer.MembershipTypeId)
        @Html.DropDownListFor(c => c.Customer.MembershipTypeId,
        new SelectList(Model.MembershipTypes, "Id", "Name"),
        "Select Membership Type",
        new { @class = "form-control" })
        @Html.ValidationMessageFor(m => m.Customer.MembershipTypeId)
    </div>
    @*Checkbox has a different html layout, so you can go and look for
        forms layouts on bootstraps site for checkboxes.*@
    <div class="checkbox">
        <label>
            @Html.CheckBoxFor(c => c.Customer.IsSubscribedToNewsletter) Subscribed to Newsletter?
        </label>
    </div>
    @*Adding hidden form for customer.Id so that if the user
    is not New and has some Id from Database, we can later
    use it in Save action of CustomerController class.*@
    @Html.HiddenFor(m => m.Customer.Id)

    @*To deal with Cross-site Request Forgery use this. It creates
        some secret token and puts it in the cookies of the user,
        so that it wont be possible to execute form from different
        source/user/browser.*@
    @Html.AntiForgeryToken()
    <button type="submit" class="btn btn-primary">Save</button>
}
