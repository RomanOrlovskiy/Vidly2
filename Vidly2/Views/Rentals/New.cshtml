
@{
    ViewBag.Title = "New";
}

<h2>New Rental Form</h2>
@*Using raw HTML instead of RazorViews*@

<form id="newRental">
    @*Zencoding from WebEssentials
    div.form-group>label+input[type='text'].form-control and press tab
    *@
    <div class="form-group">
        <label>Customer</label>
        <div class="tt-container">
            <input id="customer" name="customer" data-rule-validCustomer="true" required type="text" value="" class="form-control" />
        </div>
    </div>
    <div class="form-group">
        <label>Movie</label>
        <div class="tt-container">
            <input id="movie" name="movie" data-rule-atLeastOneMovie="true" type="text" value="" class="form-control" />
        </div>
    </div>
    <div class="row">
        <div class="col-md-2">
            <ul id="movies" class="list-group"></ul>
        </div>
    </div>

    <button class="btn btn-primary">Submit</button>
</form>
@section scripts
{
    @Scripts.Render("~/bundles/jqueryval")
    <script>
        $(document).ready(function () {

            var vm = {
                movieIds: []
            };

            //Bloodhound is a suggestion engine behind the typeahead.
            //It encapsulates all the business logic behind autocomplition.
            var customers = new Bloodhound({
                //look at the NAME property of customer and use whitespace
                //to tokenize them.
                datumTokenizer: Bloodhound.tokenizers.obj.whitespace('name'),
                //transfers query into a bunch of tokens
                queryTokenizer: Bloodhound.tokenizers.whitespace,
                //prefetch is useful for providing data upon initialization
                //prefetch: '../data/films/post_1960.json',
                remote: {
                    //What the user types in the textbox is a WILDCARD here.
                    //Url will query that wildcard from the server.
                    url: '/api/customers?query=%QUERY',
                    wildcard: '%QUERY'
                }
            });

            $('#customer').typeahead({
                //Query the server when there are at least 3 characters.
                minLength: 3,
                highlight: true
            }, {
                name: 'customers',
                //Display specifies what property of our customers we should
                //show in the suggestion list.
                display: 'name',
                //The source is the Bloodhound object from above.
                source: customers
                //We want to know which customer was picked so that we can 
                //later send this customer to the server. Do this with .on event
            }).on("typeahead:select", function (e, customer) {
                //e - for event, customer - selected customer
                //storng the customer in the ViewModel(vm) object above
                vm.customerId = customer.id;
            });

            var movies = new Bloodhound({
                datumTokenizer: Bloodhound.tokenizers.obj.whitespace('name'),
                queryTokenizer: Bloodhound.tokenizers.whitespace,
                remote: {
                    url: '/api/movies?query=%QUERY',
                    wildcard: '%QUERY'
                }
            });

            $('#movie').typeahead({
                minLength: 1,
                highlight: true
            }, {
                name: 'movies',
                display: 'name',
                source: movies
            }).on("typeahead:select", function (e, movie) {
                //when movies is selected add it to list above the textbox
                $("#movies").append("<li class='list-group-item'>" + movie.name + "</li>");
                //clear the movie textbox after selection
                $("#movie").typeahead("val", "");
                //store movie in viewmodel to send it to server later
                vm.movieIds.push(movie.id);

            });

            //implementing validation
            $.validator.addMethod("validCustomer", function () {
                return vm.customerId && vm.csutomerId !== 0;
            }, "Please select a valid customer.");

            $.validator.addMethod("atLeastOneMovie", function () {
                return vm.movieIds.length > 0;
            }, "Please select at least one movie.");

            var validator = $("#newRental").validate({
                //if submit form is valid, this function will be called to
                //submit the form to the server
                submitHandler: function () {

                    $.ajax({
                        url: "/api/newRentals",
                        method: "post",
                        data: vm
                    })
                    .done(function () {
                        toastr.success("Rentals successfully recorded.");
                        //clear the form on successful call
                        $("#customer").typeahead("val", "");
                        $("#movie").typeahead("val", "");
                        //clear items from the list of movies
                        $("#movies").empty();

                        //reset viewmodel(initialize to empty array)
                        vm = { movieIds: [] };

                        //reset the form in terms of its validation
                        validator.resetForm();
                    })
                    .fail(function () {
                        toastr.success("Shit went wrong, man.");
                    });
                    //prevents form from being submited noramlly
                    return false;
                }
            });
        });
    </script>

}