@model IEnumerable<Vidly2.Models.Movie>
@{
    ViewBag.Title = "Index";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<h2>Movies</h2>
@Html.ActionLink("Add movie", "New", "Movies", null, new { @class = "btn btn-primary btn-large" })

<div>
    <table id="movies" class="table table-bordered table-hover">
        <thead>
            <tr>
                <th>Movies</th>
                <th>Genre</th>
                <th>Delete</th>
            </tr>
        </thead>
        <tbody>
            @*

                @foreach (var movie in Model)
                {
                    <tr>
                        <td>
                            @Html.ActionLink(movie.Name, "Edit", "Movies", new { id = movie.Id }, null)
                        </td>
                        <td>
                            @movie.Genre.Name
                        </td>
                    </tr>
                }
            *@
        </tbody>
    </table>

</div>


@section scripts
{
    <script>
        $(document).ready(function () {
            //anable datatables plug-in
            var table = $("#movies").DataTable({
                ajax: {
                    url: "/api/movies",
                    method: "GET",
                    //dataSrc is set to "" because the response from the API is
                    //an array of objects and we dont need to specify a particular
                    //attribute to pick as a data source because the array itself
                    //is an actual source of data and our DataTable does not
                    //need to go to other object to get it.
                    dataSrc: ""
                },
                //supply an object for each column
                columns: [
                    {
                        
                        //data property tells where to get data for this column.
                        data: "name",
                        //data property reads it as a string but we want it to
                        //also be a link to the Edit page. For this user "render"
                        render: function (data, type, movie) {
                            return "<a href='/movies/edit/" + movie.id + "'>" + movie.name + "</a>";
                        }
                    },
                    {
                        //second column - genre type
                        data: "genre.name"
                    },
                    {
                        //third column - delete button
                        data: "id",
                        render: function (data) {
                            return "<button class='btn-link js-delete' data-movie-id=" + data + ">Delete</button>";
                        }
                    }
                ]
            });
            //Using ".js-delete" as a filter
            //Using ".js-delete" as a filter for .on() method makes it so that
            //we will have only one click handler for all delete buttons
            //instead of having a separete click handler for each delete button.
            //The .on click event is attached to the DOM element with ID "movies"
            //and it will be only raised when the user clicks on the element
            //of that "movies" table that is of class ".js-delete".
            $("#movies").on("click", ".js-delete", function () {
                //reference to a button DELETE so that we can use it in
                //case of successful ajax request
                var button = $(this);

                //cool box
                bootbox.confirm("Are you sure you want to delete this movie?", function (result) {
                    if (result) {
                        $.ajax({
                            url: "/api/movies/" + button.attr("data-movie-id"),
                            method: "DELETE",
                            success: function () {
                                //Remove the row in the table where DELETE button was clicked
                                //and remove customer from DB.

                                //This just removes the <tr> node from the DOM.
                                //So if after removing a customer you will next search
                                //for his name without reloading the page, he will still be found.
                                //This happens because the customer is still in DataTable
                                //because DataTables keeps the list of customers internaly so when
                                //you go back to search the table, the table is refreshed using
                                //that internal list, and as result shows deleted customer again.
                                //To fix this you need to work with internal list of DataTable:
                                //first delete the customer, then redraw itself.
                                table.row(button.parents("tr")).remove().draw();
                            }
                        });
                    }
                });

                //standart box
                //if(confirm("Are you sure you want to delete this customer?"))
                //{
                //    $.ajax({
                //        url: "/api/customers/" + button.attr("data-customer-id"),
                //        method: "DELETE",
                //        success: function () {
                //            //remove the row in the table where DELETE button was clicked
                //            //and remove customer from DB
                //            button.parents("tr").remove();
                //        }
                //    });
                //}
            });
        });
</script>    
    
}
